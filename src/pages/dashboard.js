import React, { useState, useEffect, useRef } from 'react';
import { useUser } from '../contexts/UserContext';
import { Container, Row, Col, ButtonGroup, Button, Table } from 'react-bootstrap';
import Head from 'next/head';
import Image from 'next/image';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../lib/firebase';
import Link from 'next/link';
import { useRouter } from 'next/router';
import styles from '../styles/Dashboard.module.css';
import Chart from 'chart.js/auto';

const ChartComponent = ({ type, data, options, width, height }) => {
  const chartRef = useRef(null);

  useEffect(() => {
    if (chartRef.current) { // Check if the chartRef is not null
      const chart = new Chart(chartRef.current, { // Create the chart
        type, // Set the chart type
        data, // Set the chart data
        options: {// Set the chart options
          responsive: true,
          maintainAspectRatio: false,
          indexAxis: 'y',
          scales: {
            x: {
              title: {
                display: true,
                text: 'Quantity in Stock',
                color: '#000000',
      
              },
            },
            y: {
              title: {
                display: true,
                text: 'Item Name',
                color: '#000000',
              },
            },
          },
        },
      });

      return () => {
        chart.destroy();
      };
    }
  }, [type, data, options]);

  return <canvas ref={chartRef} width={width} height={height}/>;
};

const DashboardPage = () => {
  const { user, loading, logout } = useUser();
  const [items, setItems] = useState([]);
  const [chartData, setChartData] = useState(null);
  const router = useRouter(); // Initialize useRouter

  useEffect(() => {
    const fetchItems = async () => {
      const itemsCollection = collection(db, 'items');
      const itemsSnapshot = await getDocs(itemsCollection);
      const itemsList = itemsSnapshot.docs.map(doc => {
        return {
          id: doc.id,
          name: doc.data().name,
          description: doc.data().description,
          quantity: doc.data().quantity,
          price: doc.data().price,
          createdAt: doc.data().createdAt ? doc.data().createdAt.toDate() : null,
          updatedAt: doc.data().updatedAt && doc.data().updatedAt.toDate ? doc.data().updatedAt.toDate() : null,
        };
      });
      setItems(itemsList);

      // Calculate total quantity of all items
      const totalQuantity = itemsList.reduce((total, item) => {
        return total + item.quantity;
      }, 0);

      // set chart data
      setChartData({
        labels: itemsList.map(item => item.name),
        datasets: [{
          label: 'Quantity',
          data: itemsList.map(item => item.quantity),
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1,
        }],
        total: totalQuantity,
      });
    };

    // Refetch the items when the updatedAt query parameter changes
    const handleRouteChange = (url, { shallow }) => {
      if (router.asPath.startsWith('/dashboard') && !shallow) {
        fetchItems();
      }
    };

    router.events.on('routeChangeComplete', handleRouteChange);
    fetchItems();

    // Clean up the event listener when the component is unmounted
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange);
    };
  }, [router]);

  const handleEdit = (itemId) => {
    router.push(`/edit/${itemId}`);
  };

  const handleView = async () => {
    router.push('/dashboard');
  };

  // If the page is still loading, display a loading message
  if (loading) {
    return <div>Loading...</div>;
  }
  // Render the dashboarde page with the user's email, a button to add a new item, and a grid view of items
  return <>
    <Head>
      <title>FloralFlow Dashboard</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <Container className={`${styles.main} py-5`}>
      <Row className="justify-content-center">
      {chartData && (
              <div className={styles.chartContainer} >
                <ChartComponent type="bar" data={chartData} options={{}} />
              </div>
            )}
      </Row>
      <Row className="justify-content-center">

         <Table striped bordered hover>
            <thead>
              <tr>
                <th>Item Name</th>
                <th>Item Description</th>
                <th>Quantity</th>
                <th>Edit</th>
                <th>Last Updated</th>
                <th>Stock</th>
              </tr>
            </thead>
            <tbody>
              {items.map(item => (
                <tr key={item.id}>
                  <td><Link href={`/item/${item.id}`}>{item.name}</Link></td>
                  <td>{item.description}</td>
                  <td>{item.quantity}</td>
                  <td><button
                  onClick={() => handleEdit(item.id)}
                  className={`${styles.button}`}
                  >Edit</button></td>
                 {/*  <td><Link href={`/edit/${item.id}`}>Edit</Link></td> */}
                  <td>{item.updatedAt ? item.updatedAt.toLocaleString() : 'N/A'}</td>
                  <td>
                 
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
         
        </Row>
      </Container>
</>;
};

// Style for the images in each item
const imageStyle = {
  maxWidth: '100%',
  height: 'auto',
};

export default DashboardPage;