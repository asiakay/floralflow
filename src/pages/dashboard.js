import React, { useState, useEffect /* useRef */ } from 'react';
import { useUser } from '../contexts/UserContext';
import { Container, Row, Col, ButtonGroup, Button, Table } from 'react-bootstrap';
import Head from 'next/head';
import Image from 'next/image';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../lib/firebase';
import Link from 'next/link';
import { useRouter } from 'next/router';
import styles from '../styles/Dashboard.module.css';
//eeeeee import { Chart } from 'react-chartjs-2';
import randomColor from 'randomcolor';
import GoogleChart from '@/components/GoogleChart';
// import ChartComponent from '@/components/ChartComponent';
// import Chart from '../components/ChartComponent';
// import { Chart } from 'react-google-charts';
//import { useChart } from '../contexts/ChartContext';
//eeeeeeeeeeeeeeeeeeeeeeeeeeeeee

//eeeeeee

//
const DashboardPage = () => {
  const { user, loading, logout } = useUser();
  const [items, setItems] = useState([]);
  const [chartData, setChartData] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const fetchItems = async () => {
      const itemsCollection = collection(db, 'items');
      const itemsSnapshot = await getDocs(itemsCollection);
      const itemsList = itemsSnapshot.docs.map(doc => {
        return {
          id: doc.id,
          name: doc.data().name,
          description: doc.data().description,
          quantity: doc.data().quantity,
          price: doc.data().price,
          createdAt: doc.data().createdAt ? doc.data().createdAt.toDate() : null,
          updatedAt: doc.data().updatedAt && doc.data().updatedAt.toDate ? doc.data().updatedAt.toDate() : null,
        };
      });

      const colors = randomColor({
        count: itemsList.length,
        luminosity: 'light',
        format: 'rgba',
        alpha: 0.5,
      });

      const itemsListWithColors = itemsList.map((item, index) => ({
        ...item,
        backgroundColor: colors[index],
      }));

      setItems(itemsListWithColors);

      const totalQuantity = itemsList.reduce((total, item) => {
        return total + item.quantity;
      }, 0);



       setChartData({
        labels: itemsList.map(item => item.name),
        datasets: [{
          label: 'Quantity',
          data: itemsList.map(item => item.quantity),
          backgroundColor: colors,
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1,
        }],
        total: totalQuantity,
      });
    };
 //
    const handleRouteChange = (url, { shallow }) => {
      if (router.asPath.startsWith('/dashboard') && !shallow) {
        fetchItems();
      }
    };

    router.events.on('routeChangeComplete', handleRouteChange);
    fetchItems();

    return () => {
      router.events.off('routeChangeComplete', handleRouteChange);
    };
  }, [router]);
  //eeeeeeeeeeeeee
  const handleEdit = (itemId) => {
    router.push(`/edit/${itemId}`);
  };

  const handleView = async () => {
    router.push('/dashboard');
  };

  if (loading) {
    return <div>Loading...</div>;
  }
//
  return <>    <Head> {/* Add the page title and description to the head */}
      <title>FloralFlow Dashboard</title> {/* Set the page title */}
      <meta name="description" content="Generated by create next app" /> {/* Set the page description */}
      <meta name="viewport" content="width=device-width, initial-scale=1" /> {/* Set the page viewport */}
      <link rel="icon" href="/favicon.ico" />   {/* Set the page favicon */}
    </Head> {/* End of the head */}
    <Container className={`${styles.main} py-5`}> {/* Start the main container */}
 {/*    {chartData && ( // If the chartData exists
              <div className={`${styles.chartContainer}`} > {/* Start the chart container */}
             {/*    <ChartComponent // Render the ChartComponent
                type="bar" // Set the chart type to bar
                data={chartData} // Pass the chartData to the chart
                 options={{}} // Pass theeeeee chart options to the chart
                 width={800} // Set the chart width
                 height={800} // Set the chart height
                 /> {/* End of the ChartComponent */}
             {/*  </div> // End of the chart container */}
           {/* End of the if statement */} 


{/* <Chart 
type={bar}
options={...}
data={...}
width={...}
height={...}
/>
 */}

 {/* ReactChartJS */}

{/*  <Chart /> */}

{chartData && ( // If the chartData exists
              <div className={`${styles.chartContainer}`} > {/* Start the chart container */}
              <GoogleChart />
              </div> // End of the chart container */}
            )} {/* End of the if statement */}

      <Row className="justify-content-center">  {/* Start the row */}
      
      </Row> {/* End of thee row */}
      <Row className="justify-content-center"> {/* Start the row */}

      <Table striped bordered hover> {/* Start the table */}
  <thead>{/* Start the table header */}
    <tr>{/* Start the table row */}
      <th>Item Name</th>{/* Set the table header */}
      <th>Item Description</th>{/* Set the table header */}
      <th>Quantity</th>{/* Set the table header */}
      <th>Edit</th>{/* Set the table header */}
      <th>Last Updated</th>{/* Set the table header */}
      <th>Stock</th>{/* Set the table header */}
    </tr>{/* End of the table row */}
  </thead>{/* End of the table header */}
  <tbody>{/* Start the table body */}
    {items.map(item => ( // Map through the items
      <tr // Start the table row
        key={item.id} // Set the table row key
        style={{ backgroundColor: item.backgroundColor }} // Set the table row background color
      >{/* Set the table row style */}
        <td><Link href={`/item/${item.id}`}>{item.name}</Link></td>{/* Set the table data */}
        <td>{item.description}</td>{/* Set the table data */}
        <td>{item.quantity}</td>{/* Set the table data */}
        <td><button // Set the button to navigate to the edit page
          onClick={() => handleEdit(item.id)} // Add the onClick event listener
          className={`${styles.button}`} // Add the button styles
        >Edit</button></td>{/* Set the table data */}
                 {/*  <td><Link href={`/edit/${item.id}`}>Edit</Link></td> */}
                  <td>{item.updatedAt ? item.updatedAt.toLocaleString() : 'N/A'}</td> {/* Set the table data */}
                  <td> {item.quantity > 0 ? 'In Stock' : 'Out of Stock'}
                  </td> {/* Set the table data */}
                </tr> // End of the table row
              ))} {/* End of the map function */}
            </tbody> {/* End of the table body */}
          </Table> {/* End of the table */}
        </Row> {/* End of the row */}
      </Container> {/* End of the main container */}
</>; {/* End of the dashboard page */}
}; // End of the DashboardPage function

// Style for the images in each item
const imageStyle = {
  maxWidth: '100%',
  height: 'auto',
};

export default DashboardPage;