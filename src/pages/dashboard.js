import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useUser } from '../contexts/UserContext';
import { Container, Row, Col, ButtonGroup, Button, Table } from 'react-bootstrap';
import Head from 'next/head'
//import AddItemForm from '../components/AddItemForm';
import Image from 'next/image';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../lib/firebase';
import Link from 'next/link';
import styles from '../styles/Dashboard.module.css';

const DashboardPage = () => {
  const { user, loading, logout } = useUser();
  const [items, setItems] = useState([]);

  // Fetch items from Firestore and store them in state when the component mounts:
  useEffect(() => {
    const fetchItems = async () => {
      const itemsCollection = collection(db, 'items');
      const itemsSnapshot = await getDocs(itemsCollection);
      const itemsList = itemsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setItems(itemsList);
    };
    // Check if window is defined before calling fetchItems
    if (typeof window !== 'undefined') {
      fetchItems();
    }
  }, []);

  const router = useRouter();

  // If the user is not logged in, redirect them to the login page
 if (!loading && !user) {
    router.push('/login');
  }

  // If the page is still loading, display a loading message
  if (loading) {
    return <div>Loading...</div>;
  }

  // Render the dashboard page with the user's email, a button to add a new item, and a grid view of items
  return <>
    <Head>
      <title>FloralFlow Dashboard</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <Container className={`${styles.main} py-5`}>
      <Row className="justify-content-center">
         
         <Table striped bordered hover>
            <thead>
              <tr>
                <th>Item Name</th>
                <th>Item Description</th>
{/*                 <th>Supplier</th>
 */}                <th>Quantity</th>
                <th>Edit</th>
              </tr>
            </thead>
            <tbody>
              {items.map(item => (
                <tr key={item.id}>
                  <td>{item.name}</td>
                  <td>{item.description}</td>
{/*                   <td>{item.supplier}</td>
 */}                  <td>{item.quantity}</td>
                  <td><Link href={`/edit/${item.id}`}>Edit</Link></td>
                </tr>
              ))}
            </tbody>
          </Table>
            
         
         
         
         
               {/* Display the iteeeeeeeeeeeeeeeeeeeeeeeeeems in a grid view */}

         {/*  <div style={gridStyle}>
          {items.map(item => (
            <div key={item.id} style={itemStyle}>
              <Link href={`/item/${item.id}`}>
                <Image src={item.image} style={imageStyle} alt={item.name} />
                <h3>{item.name}</h3>
                <p>{item.description}</p>
                <p>Supplier: {item.supplier}</p>
                <p>Quantity: {item.quantity}</p>
              </Link>
            </div>
          ))}
        </div> */}
        </Row>
      </Container>
</>;
};

/* // Style for the grid container
const gridStyle = {
display: 'grid',
gridTemplateColumns: 'auto auto auto',
gridGap: '1rem',
};

// Style for each item in the grid
const itemStyle = {
border: '1px solid #ccc',
padding: '1rem',
color: '#ccc',
};

// Style for the images in each item
const imageStyle = {
maxWidth: '100%',
height: 'auto',
}; */

// Style for the images in each item
const imageStyle = {
  maxWidth: '100%',
  height: 'auto',
};

export default DashboardPage;
